<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"><channel><title>~Enigma~</title><link>http://sophAi.github.com/Enigma</link><description>It's a journey toward happiness</description><lastBuildDate>Wed, 05 Jun 2013 17:02:35 GMT</lastBuildDate><generator>nikola</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>寫作第一步，純文字檔的好處</title><link>http://sophAi.github.com/Enigma/posts/writing_beginner.html</link><description>&lt;!-- title: 寫作第一步，純文字檔的好處 --&gt;
&lt;!-- slug: writing_beginner --&gt;
&lt;!-- date: 20130605 16:48:49 --&gt;
&lt;!-- tags: --&gt;
&lt;!-- link: 自由軟體 --&gt;
&lt;!-- description: Created at 20130605 12:14:46 --&gt;
&lt;!-- ===================================Metadata↑================================================ --&gt;
&lt;!-- ● 記得加上tags: 人生，狗狗，程式，生活紀錄，英文，閱讀，教養，科學，mathjax --&gt;
&lt;!-- ● 記得加上slug，會以slug內容作為檔名(html檔) --&gt;
&lt;!-- ===================================文章起始↓================================================ --&gt;
&lt;p&gt;用慣word等排版軟體的人，可能比較難以理解純文字檔的好處，因此我們從一個Office使用者的角度，來分析使用純文字寫作有哪些好處：&lt;/p&gt;
&lt;div class="section" id="id1"&gt;
&lt;h2&gt;格式與內容分開&lt;/h2&gt;
&lt;p&gt;將純文字檔作為所有格式的原始資料是再適合也不過的了，跟doc這類將內容與格式綁在一起的格式不同，由於純文字檔案，並不能適切的表現出排版的效果，例如文字繞圖，置中，靠左，標題，甚至是換頁標籤等，這些都沒有辦法在純文字檔裡表現，因此使用純文字檔最重要的哲學就是―「格式與內容分開處理」，想想一份文稿，我們可以用網頁呈現(html)，也可以用doc檔呈現，甚至是pdf檔，他們雖然排版方式有些不同，但是內容卻是相同的，如果我們將內容的部份獨立出來，只需套用一些格式設定，就能輕易地將這個文件在不同的格式與檔案間變換，也許您會說，市面上已經有一堆軟體可以將doc檔轉換成其他格式，然而word不可能支援各式各樣的檔案格式的，例如電子書,chm，wiki，說明文件(man page)，甚至是心智圖，純文字檔的好處就是，99%的檔案格式都可以，甚至只能由純文字檔轉換而來，而這些轉換程式大多為自由軟體。&lt;/p&gt;
&lt;p&gt;當我們將格式與內容分開處理，是否就代表我們的文稿再也無法呈現類似word那樣多彩多姿的排版呢?其實完全相反，我們先看看大多數人最常使用的插入圖片功能，在純文字檔裡要實現插入圖片，只要如同描述一個文章的段落一般輸入某些敘述，只是內容為「這裡插入某某圖檔，位置與長寬如下，以及他的圖片敘述如下」，轉換格式的程式會自動依照該描述將圖片插入，當然，由於純文字檔本身不可能放置圖片，因此這種效果必須要等到轉換成doc，odt，或pdf檔之後才看得到。這種作法有好處也有壞處，壞處就是以前使用word那種所見即所得的效果不再，但好處卻是進行文章撰寫時，只要先在適當的段落間寫下「這裡插入某張圖片」的描述即可，等到文章完成了，才開始進行圖片位置與大小的整修，這種「內容至上，排版最後」的寫作哲學，反而可以將作者從寫作排版兩頭燒的混亂中解救出來。畢竟當您文思泉湧時，卻因為不停調整文繞圖效果到最佳狀態而打斷思緒，或是寫到一半，突然想中途插入一張圖片，結果發現排版整個大搬風，這些事件往往都會讓人跳腳不已。如果您已經很習慣在寫作當時同時處理這些排版，不如試著用純文字檔進行第1階段的寫作，好好享受沒有排版的干擾，專注在內容一氣呵成的寫作哲學吧!&lt;/p&gt;
&lt;p&gt;先前所說的插入圖片只是格式裡的一小部份，事實上圖表，數學式子，超連結，註腳，大小標題，粗斜體，文獻，項目(1,2,3..)，甚至是具有連結功能的章節目錄，我們可以說，要寫成一本書所需要的所有功能都一應具全，只有兩樣東西是沒有的，就是文書處理軟體漂亮的介面與所件即所得的效果，會讓純文字檔相形之下似乎是上古時代的文物。同時，寫作者必須要學習一些受用一生的輕量級文件語法，以這篇文章為例，我所使用的是RestructuredText(ReST)這個輕量級文件格式，在vim下，他可以透過插件隨時將您編輯的內容轉換成pdf檔，因此通常我都是文章寫得差不多了，才會轉換成pdf檔檢查一下，其他語言還有更簡單的tex2tag，或是同等好用的Markdown，我採用ReST的理由，一方面是因為其為Python內定的文件格式，另一方面，則是這個網站是以ReST為主，python語言的好處擇日詳述，我覺得他是每個想學程式語言的人必定要接觸的。寫好的ReST純文字檔，除了轉換成你我所看到的網頁內容，也可以輕易的轉換成office格式，Ebook格式，chm格式，以及pdf格式，說他是一切文件的原始碼也不為過，同時，這些語法也不會讓整篇文章變得有如程式語言般的難以理解。雖然沒有華麗的外觀加持，換取的卻是極大的便利性與回歸寫作的核心，最後由轉換成純文字寫作後的A君的一段感想作為本章節的結尾:&lt;/p&gt;
&lt;div class="system-message"&gt;
&lt;p class="system-message-title"&gt;System Message: WARNING/2 (&lt;tt class="docutils"&gt;&amp;lt;string&amp;gt;&lt;/tt&gt;, line 23)&lt;/p&gt;
Literal block expected; none found.&lt;/div&gt;
&lt;p&gt;「排版的確是寫作殺手，他扼殺了創作時的靈感，並讓寫作者陷入無盡的修改迴圈。」&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id2"&gt;
&lt;h2&gt;檔案輕巧，不易損毀&lt;/h2&gt;
&lt;p&gt;純文字檔最大的好處就是，任何基本的編輯程式都可以開啟，如果您嘗試用記事本開啟一個doc檔，你會發現裏面盡是亂碼，這是因為Office的文檔是封閉格式，所有內容會經過一連串機密的演算法進行編碼，因此只有微軟自家的軟體才能「正確」開啟，拜這個特性所賜，Office文件的排他性其實是很大的，換句話說，十個相容doc格式的軟體，大概有9個以上無法100%呈現word底下的排版效果，這也意味著隨著文件累積，您可能愈需要緊緊跟隨著Office的升級，與這個軟體共存亡，同時，由於有編碼就必須解碼，一旦檔案裡有個小地方出錯，可能就會造成解碼的失敗，而使檔案損毀，這時大概只能把檔案寄回Office總部才能救得回來[#]，有關封閉文書檔的特性到此打住，純文字檔的內容則一目了然，有安全性考量的寫作者只需要用最普遍的壓縮軟體以密碼加密壓縮即可達到更好的安全效果，被人偷窺內容的機率更可大大降低(別忘了，Office總部的人總是可以開啟你所加密的office文件，因為格式是他們發明的)，由於圖檔是與文字檔分開存放，可以大大壓低檔案的容量，而有關圖檔的安排邏輯，自然就會跟doc檔不同，同時，也不需要擔心這會造成檔案流傳的不便，別忘了，我們隨時可以將文檔轉換成pdf或odt，甚至是純網頁不是嗎?以我的習慣來說，我會在文檔的專案裡建立專門存放純文字檔的目錄，同時在另外一個目錄裡建立專門存放對應圖檔的目錄，不同的純文字檔可以共用同一個圖檔，只要使用相對路徑即可，不會因為納入圖片這個機制而浪費額外的空間，可以大大降低備份與轉移檔案的困難度，而文字檔就只有文字內容，更讓大量進行修改的工作變得更簡單了，例如,我可以利用終端機下的diff功能比對兩個寫作版本的不同，或使用正規表示法與腳本(script)一次大量的替換所有文檔裡的某個名詞，如果檔案裡有任何差錯，並不會使整個檔案損毀無法讀取，因為他完全沒有編碼的內容，最重要的是，他讓高度彈性的版本控制變得可行，我會在下一節裡提到這點。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id3"&gt;
&lt;h2&gt;容易管理與備份&lt;/h2&gt;
&lt;p&gt;看著不斷堆積的文件檔，真是每個寫作者的噩夢，你有沒有以下的經驗:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;&lt;li&gt;發現新版的文書處理軟體開啟n年前的文書檔，呈現一團糟的情況。&lt;/li&gt;
&lt;li&gt;如果你正在用文書處理軟體寫一本書，或是你的畢業論文，裡面有很多插圖，你會發現檔案的容量快速暴增，直到每次開啟與儲存，都是一場膽顫心驚的等待過程。&lt;/li&gt;
&lt;li&gt;因為某個操作，有可能是其他的應用程式 , 造成文書處理程式停止回應了，關也不是，等待也不是的尷尬時間。&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;說穿了，這就是排版與內容綁在一起，最終所面臨的問題，隨著文件內容愈來愈豐富，檔案也會愈來愈肥大，各式精心設計的排版效果更是沒有跨越不同軟體版本的保證，因為雖然內容都一樣，但是排版的型式會隨著軟體的架構改變或是新改良的功能而受到時間的考驗。因此寫作者會一而在，在而三的面臨不斷排版的命運，如果今天你的出版社沒有剛上市不久的新文書處理軟體，偏偏你是用最新的文書格式所撰寫的，那麻煩可大囉!除非你可以要求他們全面更新到最新的文書處理軟體。&lt;/p&gt;
&lt;p&gt;管理則是另一個問題，我們都知道寫作有很多階段，隨著時間過去，文章可能會愈來愈成熟，也可能會大量刪減或修改一些章節，有時還需要回過頭來重新使用已經刪去的段落，這在撰寫論文時尤其常見，在集體寫作時，更經常存在不同的版本，然而對於doc這類格式而言，我們只能不斷複製大同小異的檔案，給予一堆檔名編號，如果寫作內容(包含插圖)已經稍具規模(肥大)，每一次的修改你可能都要重新複製一個新的，以保留舊的檔案備不時之需，最後只會留下一堆亂七八糟且非常佔空間的備份檔，而追蹤修訂的功能，會讓本來已經焦頭爛額的版面變得更加混亂，日子久了，你根本就記不起來這個版本做了什麼，以至於備份時刪也不是，保留也不是，雖然大多數人還是會找個燒錄光碟全部燒一燒就丟在角落，這種只能一次性寫作的模式其實是非常氾濫，比較有經驗的寫作者，或許會開個excel檔來紀錄每個版本的不同，這也的確是這種情況下的最佳辦法了。將場景移到使用純文字檔編輯的寫作者，他們也面臨同樣的問題，但是等等，其實專門用來控制程式寫作的版本控制系統，例如git與svn，就是專門應用在純文字檔上(所有的程式碼都是純文字檔)，何不將這套系統用在純文字的寫作上呢?這些版本控制系統，都是自由軟體，如果你是Linux使用者，這些東西幾乎都是內建，可以馬上使用，版本控制系統以非常輕量與巧妙的方式，紀錄著你每個版本的不同，你可以輕易的叫出兩個不同時期的文章版本,用diff察看兩者的不同[#]，你也可以摹仿我的版本控制方式，利用github這類專門提供給程式設計師的原始碼網站，來進行寫作的版本控制與備份，這樣的方式更使得異地寫作與集體寫作變得更加容易(缺點是對方也得熟悉這些東西)，只要有網路，即使我不在自己的電腦旁邊，雖時可以clone一份我最新的版本，或是白天在公司的電腦撰寫，晚上回來，家裡的電腦已經同步更新了有最新的版本，因此這種同步備份與管理的機制更不受限於硬體，git與svn都是發展非常成熟，而且廣為大型軟體專案所採用的版本控制系統，也是學一次就受用一生的工具，最重要的是，你會發現你的檔案井井有條，乾淨的目錄，以及備份時發現讓人感動得痛哭流涕的超低磁碟容量使用率，這看起來就好像老祖宗的智慧再次顯靈一樣(雖然他們實際上並不老)。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id4"&gt;
&lt;h2&gt;寫作之外的意外收穫&lt;/h2&gt;
&lt;p&gt;是的，使用純文字檔寫作，你可能得學習個輕量級的文件語法，一個好用的純文字編輯器，甚至是版本控制，由於沒有數學編輯器了，你可能也得學學怎麼使用Latex數學，然而與三頭兩天就大改特改的文書處理軟體不同的是，這些東西都是發展已久，成熟且歷久彌新的工具，你不用擔心過幾年這些東西就落伍了，更不用擔心排版不出美觀大方的東西，只是那是寫完文章後最後才要做的事，純文字檔所提供的敏捷性與彈性更是其他編碼的檔案格式所無法比擬的，雖然可能還是有人覺得純文字實在是太落伍了，就跟使用記事本寫論文一樣，但是我們必須澄清，記事本這個東西其實遠遠達不到我們對於編輯純文字檔的要求，應該去試試Emacs跟vim等被尊稱為神之編輯器與編輯器之神的東西，這就好像在燈紅酒綠，目眩神迷的世界裡走過，最後反璞歸真一般。我們其實需要的不是那些炫麗的排版功能，而是心無旁騖地專注在文章內容上，這才是寫作最重要的事，然而文書處理軟體卻不時存在排版反客為主的問題，因為他就是排版軟體。當你終於將他的功能練至爐火純青的地步時，他總是三不五時來個大改版，讓你武功廢了一大半，你不跟著升級到新版本，似乎也不行呢?&lt;/p&gt;
&lt;p&gt;無論是輕量級文件語法，vim/emacs，版本控制，或是Latex，他們的功用都不單單只有寫作，當你學得愈多，你會發現他們可以應用的地方也愈來愈廣泛，舉例來說，你可以用他們來進行Blog寫作，就像我現在做的，同時替未來程式語言的學習鋪路，如果你還是學生，這些技能對於論文寫作更是幫助多多，甚至簡報都可以由這些工具完成。在自由軟體的世界裡，幾乎所有需要數學式子的地方，都優先以Latex支援為考量，例如圖表，或是wiki筆記等，同時，輕量級的文件語法非常重視文章結構，他會強迫你注意標題與子標題等架構問題，強迫你注意段落的安排，因此無論是用他來寫作，或是製造簡報，都會在不自覺的情況下創造出結構嚴謹的內容，這也是現今大多數的文章與簡報所缺乏的，這也可以說是因為少了擔憂如何排版所帶來的副作用。說了這麼多，也只有放開心胸學習這些東西才能有所領悟，接下來我們會從編輯器，ReST語法，最後到git版本控制，來帶領各位體會純文字寫作的樂趣。&lt;/p&gt;
&lt;table class="docutils footnote" frame="void" id="id5" rules="none"&gt;&lt;colgroup&gt;&lt;col class="label"&gt;&lt;col&gt;&lt;/colgroup&gt;&lt;tbody valign="top"&gt;&lt;tr&gt;&lt;td class="label"&gt;[1]&lt;/td&gt;&lt;td&gt;這些軟體使用授權費用，有些是包含在學雜費裡，有些則是納稅人買單，總之他不是免費，費用更不是憑空產生，&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;table class="docutils footnote" frame="void" id="id6" rules="none"&gt;&lt;colgroup&gt;&lt;col class="label"&gt;&lt;col&gt;&lt;/colgroup&gt;&lt;tbody valign="top"&gt;&lt;tr&gt;&lt;td class="label"&gt;[2]&lt;/td&gt;&lt;td&gt;這是真實發生的事，有一次我一不小心將含有圖檔的doc檔案儲存成rich text格式，這僅僅是因為滑鼠點錯地方，結果word幫我輸出成500MB的龐大doc檔，想當然爾，不但完全無法開啟，連帶我之前打的內容全部無法還原，只能含淚尋找更早的備份，重新將這幾個小時撰寫的內容憑記憶重新打上，作白工與重寫加起來的時間難以估計。&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;table class="docutils footnote" frame="void" id="id7" rules="none"&gt;&lt;colgroup&gt;&lt;col class="label"&gt;&lt;col&gt;&lt;/colgroup&gt;&lt;tbody valign="top"&gt;&lt;tr&gt;&lt;td class="label"&gt;[3]&lt;/td&gt;&lt;td&gt;diff當然也可以用在doc檔這類格式，只是你看到的是亂碼部份不同之處，而且數量將非常可觀，不建議這麼做，除非你想欣賞一些奇觀來娛樂自己一下。&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;!-- ===================================文章結束↑/語法備忘錄↓==================================== --&gt;&lt;!-- ● 格式1 ― 粗體(**字串**)  斜體(*字串*)  大字(\ :big:`字串`\ )  小字(\ :small:`字串`\ ) --&gt;&lt;!-- ● 格式2 ― 上標(\ :sup:`字串`\ )  下標(\ :sub:`字串`\ )  ``去除格式字串`` --&gt;&lt;!-- ● 項目 ― #. (換行) #.　或是a. (換行) #. 或是I(i). 換行 #.  或是*. -. +. 子項目前面要多空一格 --&gt;&lt;!-- ● 插入teaser分頁 ― .. TEASER_END --&gt;&lt;!-- ● 插入latex數學 ― 段落裡加入\ :math:`latex數學`\ 語法，或獨立行.. math:: (換行) Latex數學 --&gt;&lt;!-- ● 插入figure ― .. figure:: 路徑(換行):width: 320(換行):align: center(換行):target: 路徑 --&gt;&lt;!-- ● 插入slides ― .. slides:: (空一行) 圖擋路徑1 (換行) 圖擋路徑2 ... (空一行) --&gt;&lt;!-- ● 插入youtube ― ..youtube:: 影片的hash string --&gt;&lt;!-- ● 插入url ― 段落裡加入\ `連結字串`_\  URL區加上對應的.. _連結字串: 網址 (儘量用這個) --&gt;&lt;!-- ● 插入直接url ― \ `連結字串` &lt;網址或路徑&gt;`_ \    (包含&lt; &gt;) --&gt;&lt;!-- ● 插入footnote ― 段落裡加入\ [#]_\ 註腳    註腳區加上對應順序排列.. [#] 註腳內容 --&gt;&lt;!-- ● 插入citation ― 段落裡加入\ [引用字串]_\ 名字字串  引用區加上.. [引用字串] 引用內容 --&gt;&lt;!-- ● 插入sidebar ― ..sidebar:: (空一行) 內容 --&gt;&lt;!-- ● 插入contents ― ..contents:: (換行) :depth: 目錄深入第幾層 --&gt;&lt;!-- ● 插入原始文字區塊 ― 在段落尾端使用:: (空一行) 內容 (空一行) --&gt;&lt;!-- ● 插入本機的程式碼 ― ..listing:: 放在listings目錄裡的程式碼檔名 (讓原始碼跟隨網站) --&gt;&lt;!-- ● 插入特定原始碼 ― ..code::python (或cpp) (換行) :number-lines: (把程式碼行數列出) --&gt;&lt;!-- ● 插入gist ― ..gist:: gist編號 (要先到github的gist裡貼上程式代碼) --&gt;&lt;!-- ============================================================================================ --&gt;&lt;/div&gt;</description><guid>http://sophAi.github.com/Enigma/posts/writing_beginner.html</guid><pubDate>Wed, 05 Jun 2013 08:48:49 GMT</pubDate></item><item><title>共謀</title><link>http://sophAi.github.com/Enigma/posts/conspiracy.html</link><description>&lt;div&gt;&lt;p&gt;雖然看書已經成為我的習慣，最近卻漸漸進入一種境界，彷彿先前所累積的東西開始連貫起來，先說說最近剛看完的一本書―「30年來最好的投資；金融大地震」。一開始只是在圖書館的上架新書中撇見他，借回來也擺放了一陣子，不過當開始正式翻閱時，才驚覺這本書實在是少見的好書，先不提書中主要的內容，也就是跟經濟有關的一些事，在書的最後面，他提到了經濟學家在學術界與社會裡應該扮演的角色，以及學術界矛盾的現象，讓我這幾天不斷思考這件事。&lt;/p&gt;
&lt;p&gt;&lt;a href="/posts/conspiracy.html"&gt;Read more...&lt;/a&gt;&lt;/p&gt;&lt;/div&gt;</description><category>人生</category><category>閱讀</category><guid>http://sophAi.github.com/Enigma/posts/conspiracy.html</guid><pubDate>Wed, 05 Jun 2013 05:02:13 GMT</pubDate></item><item><title>解放M43相機的實力</title><link>http://sophAi.github.com/Enigma/posts/M43_power.html</link><description>&lt;div&gt;&lt;p&gt;從GF1開始，一直都沒有好好使用過GF1的Raw檔格式，因為主要是用Linux，還沒有時間好好研究，一直到第二個小baby快出生了，才比較有心去研究一下什麼是Raw檔，測試的結果發現Raw檔轉換成jpeg果然好太多，jpeg直出顏色有點怪異且平淡，而且能救的部份有限，看看下圖的差異(點選放大):&lt;/p&gt;
&lt;p&gt;&lt;a href="/posts/M43_power.html"&gt;Read more...&lt;/a&gt;&lt;/p&gt;&lt;/div&gt;</description><category>生活紀錄</category><guid>http://sophAi.github.com/Enigma/posts/M43_power.html</guid><pubDate>Tue, 04 Jun 2013 07:04:57 GMT</pubDate></item><item><title>GH2/GX1 - 24p, 60i, 30p, 還有60p，以及快門速度(shutter speed or shutter angle)的關係(v0.1)</title><link>http://sophAi.github.com/Enigma/posts/shutter-angle.html</link><description>&lt;div&gt;&lt;p&gt;5/23更新，有人提到以GH2錄影時，60i或60p比24p還流暢，其實是忽略了錄影階段shutter speed才是真正的影響因素，不然現今的電影錄製(24p)都不能應用在動作片上了。GH2比GX1以及其他類似的相機方便的地方就是，他的shutter speed是可以手動選擇的，GX1則只能在1/50s,1/60s,1/100s,以及1/120s間切換，至於其他不能手動調整快門速度的相機呢?我猜frame rate是多少，快門速度就固定是多少吧!另外，日光燈下的水波紋也是跟shutter speed有關，例如GX1的PAL機身，只要將shutter speed設成1/60s的倍數，就可以消除60Hz電壓頻率下日光燈的閃爍紋。那為什麼有人會強調只有NTSC的機身才能消除呢?原因在於這些機身的shutter speed都是固定在frame rate的倍數無法調整， 總而言之，GX1以後的Panasonic M43相機應該就不會再有PAL或NTSC的日光燈水波紋問題了，最後內文小更新有關高frame rate對slow motion的幫助。&lt;/p&gt;
&lt;p&gt;5/10更新，把一些該加上去的連結都補上了。&lt;/p&gt;
&lt;p&gt;&lt;a href="/posts/shutter-angle.html"&gt;Read more...&lt;/a&gt;&lt;/p&gt;&lt;/div&gt;</description><category>生活紀錄</category><guid>http://sophAi.github.com/Enigma/posts/shutter-angle.html</guid><pubDate>Wed, 29 May 2013 06:58:30 GMT</pubDate></item><item><title>生活與親子攝影入門須知--器材的選擇 (v0.1)</title><link>http://sophAi.github.com/Enigma/posts/select_camera.html</link><description>&lt;div class="section" id="id2"&gt;
&lt;h2&gt;前言&lt;/h2&gt;
&lt;p&gt;不管是剛想踏入攝影這職業，或是剛成為新手爸媽，還是想替生活來點什麼紀錄的，第1件要考慮的事，就是如何選擇攝影器材，面對琳琅滿目的攝影產品，眼花撩亂的產品開箱文與測試報告，大部分的新手在第一步就迷失了方向，以下提供幾點讓所有想入門攝影的人參考，尤其是新手父母，希望看過後，對於自己的真正需求不再迷惘，而能找到自己得心應手的器材。&lt;/p&gt;
&lt;p&gt;&lt;a href="/posts/select_camera.html"&gt;Read more...&lt;/a&gt;&lt;/p&gt;&lt;/div&gt;</description><category>生活紀錄</category><guid>http://sophAi.github.com/Enigma/posts/select_camera.html</guid><pubDate>Wed, 29 May 2013 06:58:20 GMT</pubDate></item><item><title>人生有如一場程式</title><link>http://sophAi.github.com/Enigma/posts/Programming Life.html</link><description>&lt;div class="section" id="id2"&gt;
&lt;h2&gt;不能隨便灌輸知識&lt;/h2&gt;
&lt;p&gt;我漸漸了解到，我們是不能隨便灌輸他人知識的，我們從小到大，最習以為常的學習方式，其實是來自學校，父母，朋友，書籍，媒體，以及權威，如果我們不是這裡所說的任何一個人，則可能不應該隨便跟人灌輸任何知識，即使這個知識是再正確不過的。&lt;/p&gt;
&lt;p&gt;會有這種感觸是自己喜歡閱讀與學習，有時會想跟人分享所學到的知識，無論是對家人，討論區，或是在自己的Blog，社交頁面上，這種作法在這個網路蓬勃發展的年代裡是遍處可見，但仔細想想，這樣做有許多問題。&lt;/p&gt;
&lt;!-- 部落格分頁(Teaser)標籤 --&gt;
&lt;p&gt;&lt;a href="/posts/Programming%20Life.html"&gt;Read more...&lt;/a&gt;&lt;/p&gt;&lt;/div&gt;</description><category>程式</category><category>人生</category><guid>http://sophAi.github.com/Enigma/posts/Programming Life.html</guid><pubDate>Wed, 29 May 2013 06:58:06 GMT</pubDate></item><item><title>使用MathJax與Latex數學</title><link>http://sophAi.github.com/Enigma/posts/mathjax.html</link><description>&lt;div&gt;&lt;p&gt;MathJax是一個JAVA Script，他能在網頁裡顯示Latex的數學式子，不過使用上有許多要注意的地方。&lt;/p&gt;
&lt;!-- 部落格分頁(Teaser)標籤 --&gt;
&lt;p&gt;&lt;a href="/posts/mathjax.html"&gt;Read more...&lt;/a&gt;&lt;/p&gt;&lt;/div&gt;</description><category>mathjax</category><guid>http://sophAi.github.com/Enigma/posts/mathjax.html</guid><pubDate>Wed, 29 May 2013 06:55:40 GMT</pubDate></item><item><title>適合陪伴，個性溫柔的中大型犬--Lucy</title><link>http://sophAi.github.com/Enigma/posts/lucy.html</link><description>&lt;div&gt;&lt;p&gt;2013/05/24 更新 by OASYS (Xanadu)&lt;/p&gt;
&lt;p&gt;沒想到時間過得那麼快，5年過去了，我們有了二個小孩，而Lucy跟我們的照片仍然放在櫃子上，只是稍微褪色了點。她對我們的影響至今仍持續著，這幾年，我們不斷回到原點，檢視著我們人生的目的，不斷地回味著Lucy所教我們的一切，她永遠都是我們家的一份子。&lt;/p&gt;
&lt;p&gt;2010/07/27 更新 by Gino&lt;/p&gt;
&lt;p&gt;此篇文章用以紀念最乖巧最溫柔的狗狗―Lucy&lt;/p&gt;
&lt;div class="figure align-center"&gt;
&lt;a class="reference external image-reference" href="/../arch_2013/files_2013/lucy/lucy1.jpg"&gt;&lt;img alt="../../arch_2013/files_2013/lucy/lucy1.jpg" src="/../arch_2013/files_2013/lucy/lucy1.jpg" style="width: 320px;"&gt;&lt;/a&gt;
&lt;/div&gt;
&lt;p&gt;Lucy在前年(2008年)1月17日去世了。&lt;/p&gt;
&lt;p&gt;雖然他陪伴我和老公只有短短兩年的時間，但是卻帶給我們很深遠的影響。&lt;/p&gt;
&lt;p&gt;這篇是剛撿到lucy的時候，幫他做的認養文章。&lt;/p&gt;
&lt;p&gt;自私的想，我很高興lucy最後沒有被送養出去.....&lt;/p&gt;
&lt;p&gt;因為和他相處的時間是這麼短暫而且快樂！&lt;/p&gt;
&lt;!-- 部落格分頁(Teaser)標籤 --&gt;
&lt;p&gt;&lt;a href="/posts/lucy.html"&gt;Read more...&lt;/a&gt;&lt;/p&gt;&lt;/div&gt;</description><category>狗狗</category><category>人生</category><guid>http://sophAi.github.com/Enigma/posts/lucy.html</guid><pubDate>Wed, 29 May 2013 06:55:19 GMT</pubDate></item><item><title>Convolution(摺積)的物理意義</title><link>http://sophAi.github.com/Enigma/posts/convolution.html</link><description>&lt;div class="section" id="id1"&gt;
&lt;h2&gt;問題&lt;/h2&gt;
&lt;p&gt;假設一個黑盒子(black box)是一個線性系統(LTI,Linear time invariant)，已知他的operator特性為&lt;span class="math"&gt;\(g(t''), t''=0 \rightarrow \infty\)&lt;/span&gt;
，亦即當我們用隨時間輸出的單位脈衝電流&lt;span class="math"&gt;\(\delta(t'')\)&lt;/span&gt;
輸入這個black box(因為是單位脈衝unit impulse，所以每個脈衝大小均為1，所量到的輸出對應電流即為&lt;span class="math"&gt;\(g(t'')\)&lt;/span&gt;
。&lt;/p&gt;
&lt;!-- 部落格分頁(Teaser)標籤 --&gt;
&lt;p&gt;&lt;a href="/posts/convolution.html"&gt;Read more...&lt;/a&gt;&lt;/p&gt;&lt;/div&gt;</description><category>mathjax</category><guid>http://sophAi.github.com/Enigma/posts/convolution.html</guid><pubDate>Wed, 29 May 2013 06:55:01 GMT</pubDate></item></channel></rss>