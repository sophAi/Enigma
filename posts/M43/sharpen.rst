.. title: flickr縮圖銳化探討
.. slug: sharpen
.. date: 20130710 12:53:35
.. tags: draft,學習與閱讀
.. link: 
.. description: Created at 20130620 20:38:34
.. ===================================Metadata↑================================================
.. ● 記得加上tags: 人生，狗狗，程式，生活紀錄，英文，閱讀，教養，科學，mathjax
.. ● 記得加上slug，會以slug內容作為檔名(html檔)，同時將對應的內容放到對應的標籤裡。
.. ===================================文章起始↓================================================
.. <body>

為什麼要縮圖?
------------------

目前的數位相機，其圖檔尺寸是遠超過網頁分享的需求，例如1600萬畫素的照片，相當於A3尺寸的大小，因此在相對解析度小很多的電腦螢幕上，不縮圖大概只能觀看照片的一個很小的角落。縮圖會讓照片清晰度大大降低，不管您用的相機與鏡頭再好，若是縮圖的環節出問題，只會讓照片細節糊成一片，許多人會刻意去做1:1的照片檢視，或是參考知名評測網站的鏡頭銳利度評比(MTF-50)，希望藉此能得到心目中理想的銳利畫質，但是除非要印成海報(A3尺寸的海報其實也是不上不下的)，縮圖(downsampling)才是最後成像的表現之處，這個步驟的重要性往往凌駕於器材所能提供的銳利度，如果不注重縮圖，反而會使得清晰度大幅降低，而透過良好的縮圖銳化參數，甚至會讓人誤以為是以非常高檔的器材拍攝的。說穿了，鏡頭銳利度評比參雜了感光元件總像素的影響，並不能忠實反映出縮圖下的清晰度。同時縮圖除了讓影像模糊，也會一併降低雜訊的呈現，更讓許多雜訊測試的表現流於數據高低之比較，鮮少人意識到縮圖的工作遠比硬體的差異更為重要，因此經常看到「耗費財力所添購的頂級器材,其置放在網頁上的照片卻模模糊糊的，遠不及低階廉價，卻有良好縮圖銳化的器材」這種極為尷尬的事情。

由於網路服務的發展迅速，現在有很多人都將照片上傳到網路相簿，而必然的，這些網路相簿一定要將照片縮至正常螢幕可以顯示的範圍，各家網路相簿所使用的縮圖技術有好有壞，目前大眾一致公認縮圖品質最好的應該是Flickr相簿，這不禁讓我好奇的想要知道他到底用了哪些參數，由於早期，Flickr使用的是imagemagick這個軟體作為後台的照片處理引擎，然而他所使用的參數卻是秘密，因此成為這次實驗的契機。

有關Imagemagick
-----------------

Imagemagick雖然是免費的跨平台自由軟體，其背後卻有非常多專注於影像處理的學術單位支持，一個新的影像處理技術被發展出來，往往也先以其為主要的實驗平台，他強大的功能跟他樸實的命令列文字介面實不相稱，作為自動化影像處理，而非影像編修(如GIMP, Photoshop)的應用是再適合不過的了，因此在充滿圖形的網站裡經常發現他的身影，如果您有上千張照片要處理，Imagemagick能省下非常多時間，讓您多陪陪家人與寵物，還有時間喝杯咖啡。

開始前，我們先了解一下，自己做縮圖的銳化有什麼好處呢?

#. 縮圖銳化的效果可以自行掌控。
#. 事先寫好的批次作業檔可以在彈指間完成大量例行性的縮圖工作，例如筆者撰寫包含照片的BLOG文章時，只要將照片集中在一個資料夾裡，就會自動生成縮圖檔與包含照片連結的文檔，省略了重複剪貼或上傳的步驟。
#. 不會有圖床支援的問題，我們可以將事先銳化好的縮圖上傳至任何網站，討論區，與社交網站，不需要另外開啟Flickr帳號轉貼網頁語法，而能達到同等效果。
#. 縮圖銳化的結果可以永久保存，隨時可以挪為他用，不需要將原始照片上傳到Flickr，再下載回來。
#. 理論上，網路相簿的銳化只有在縮圖過程才會進行，因此這代表只要您正確選擇上傳圖檔的比例(例如640x480)，圖片是不會經過網站的縮圖程序(假設你已經先縮圖並銳化好了)

縮圖與銳化實驗
-------------------

以縮圖為寬高最大640px為例，使用參數為::

convert 原始圖檔.jpg -colorspace RGB -filter LanczosSharp -distort
Resize 640x640 -unsharp 1x0.55+1.5+0.002 -colorspace sRGB -border 10 -quality
100 縮圖檔名.jpg

縮圖最重要的兩個環節，就是消除鋸齒狀以及適當的銳化細節，在經過無數夜晚的嘗試與比較，筆者建議採用-distort Resize與-filter LanczosSharp的縮圖參數，銳化的部份建議在縮圖之後進行，並使用-unsharp這個參數，與一般的-sharpen不同在後者是直接使用Gaussian operator在照片上進行銳化，前者則是將照片轉換成一個遮罩，將其疊在原始的圖案上，以效果來說是後者比較好，也是許多標榜smart sharpen的技術所採用的作法，好處是銳化時不會同時凸顯雜訊，可以得到純淨自然，以及清晰度高的成品。-unsharp的參數為RadiusxSigma+Amount+Threshold，其實就是描述一個Gaussian分佈的形狀，Radius指定中心像素周圍有多少像素會納入sharpen的計算，Sigma則是決定Gaussian的半高寬(standard deviation)，Amount決定Gaussian的高度(強度)，最後Threshold則是決定明暗差異的臨界值，也就是鄰近像素如果差異低於這個值則不予銳化，這個值愈高，照片銳化的程度就會愈低，類似像天空這種連續色階的部位，其實是不需要銳化的，這樣的機制就是由threshold來控制。

.. figure:: ../../arch_2013/file_2013/M43/sharpen/640_P1370103.jpg
   :target: ../../arch_2013/file_2013/M43/sharpen/640_P1370103.jpg
   :align: center

   imagemagick 未銳化


.. figure:: https://farm6.staticflickr.com/5504/9093131904_94d84757d5_c.jpg
   :target: https://farm6.staticflickr.com/5504/9093131904_94d84757d5_c.jpg
   :width: 640px
   :align: center
      
   未銳化，上傳至flickr

.. figure:: ../../arch_2013/file_2013/M43/sharpen/640_P1370103_sharpen.jpg
   :target: ../../arch_2013/file_2013/M43/sharpen/640_P1370103_sharpen.jpg
   :align: center

   imagemagick 銳化


接著來看800px解析度的結果，使用無銳化的縮圖參數::

convert P1370032_sharpen.jpg -colorspace RGB -filter LanczosSharp -distort Resize 800x800 -colorspace sRGB -border 10 -quality 100 800_P1370032.jpg

.. figure:: ../../arch_2013/file_2013/M43/sharpen/800_P1370032.jpg
   :target: ../../arch_2013/file_2013/M43/sharpen/800_P1370032.jpg
   :align: center
 
   imagemagick 縮圖未銳化

未銳化的原圖，上傳至flickr後，縮圖至800px

.. figure:: https://farm8.staticflickr.com/7402/9093134142_58ea69c6b4_c.jpg
   :target: https://farm8.staticflickr.com/7402/9093134142_58ea69c6b4_c.jpg
   :align: center
   :width: 800px

   未銳化，原圖上傳至flickr


以縮圖為寬高最大800px為例，使用參數為::

convert 原始圖檔.jpg -colorspace RGB -filter LanczosSharp -distort
Resize 800x800 -unsharp 1x0.55+1.5+0.002 -colorspace sRGB -border 10 -quality
100 縮圖檔名.jpg

.. figure:: ../../arch_2013/file_2013/M43/sharpen/800_P1370032_sharpen.jpg
   :target: ../../arch_2013/file_2013/M43/sharpen/800_P1370032_sharpen.jpg
   :align: center

   imagemagick 縮圖銳化

從這個實驗可以得知，沒有經過適當的銳化程序，將會大大影響照片在網頁上呈現的品質，這無關照片是否由高銳利的鏡頭或純淨的大片幅感光元件所產生的，而僅僅是縮圖的步驟出了問題。也凸顯以1:1檢視來判斷影像畫質的問題所在，筆者並不是在倡導「頂級器材無用」這類論調，而是指出「數位影像必存在後製」這個核心問題，毫無疑問的，頂級的器材真正提供的是「後製的寬容度」而非單純的畫質，這才是我們對於硬體器材最需要修正的認知，任何後製的環節出了問題，都很容易讓器材的優勢蕩然無存。

有關使用網路相簿與否
-----------------------

既然有Flcikr這類網路相簿，捨棄方便的服務而自己縮圖看起來的確是讓人難以理解，不過歷史上網路服務突然關閉的例子實在是太多了(例如Google Reader)，科技一日千里，我們很難想像5年，甚至是10年以後會發生什麼事，大部分的網路服務也隨著時間演變，不過大多朝向功能日益複雜邁進，介面也不斷推陳出新，也有體積日漸肥大與速度降低的隱憂，商業公司持續營運的關鍵是獲利與否，因此有諸多不確定的因素，記得當年許多風靡一時的網路服務，不到幾年都變成昨日黃花了，光是BLOG就讓筆者轉換了數次。然而無論網路服務怎麼演變，影像，聲音，跟文字都還是網路媒體的根基，這數十年來始終如一，將這些資料的主控權掌握在手中，就沒有商業產品只有買不買單這兩種選擇，就「心情」而言是大大不同的，也更不受拘束，風險也更低，例如您看到的照片，其品質與Flickr無異，但竟然是由以程式碼版本控制為主要服務的github所提供的儲存空間。同時，由於縮圖的照片與文章都是先儲存在自己擁有的機器上，再發佈到github，無論是異地備份，資料回溯或是版本控制，都是一般的社群服務，網路相簿與部落格服務所無法提供的，最後，由於完整的檔案留存在本機，使得日後轉換成其他型式(例如將文章合併為電子書，pdf檔等)，都可以由批次作業檔完成，所以與其說，這是在自找麻煩，不如說是退一步以學習換取未來更多的可能性與永續性吧!

好照片的逆向思考
--------------------

拍出好看的照片是人人追求的，在看完前述的解釋，應該不難發現「好照片逆向思考」的想法，也就是以一張好照片為起點倒推，從拍攝類型，構圖，光線掌握，故事性等開始思考，到決定成品的媒介(以印刷品或網路分享來說，最終影像所需的尺寸通常是遠低於相機提供的畫素)，要用什麼方式處理照片，然後再依這些條件考量到底需要何種器材，通常最適用的反而不是最頂級的器材。許多人從器材的硬體與規格著手，然後期望拍出來的結果在強大器材的輔助下有立竿見影之效，然而卻經常發生「不斷升級器材」照片卻沒有跟著提升這類令人難以接受的事，比較遺憾的是，目前網路上的資訊大多是屬於後者，這篇單單將成品的媒介這個環節提出來探討，即讓人能夠明顯感受到如此大的落差，期望日後有關前者的資訊能愈來愈多。

.. </body>
.. <url>



.. </url>
.. <footnote>



.. </footnote>
.. <citation>



.. </citation>
.. ===================================文章結束↑/語法備忘錄↓====================================
.. ● 格式1 ― 粗體(**字串**)  斜體(*字串*)  大字(\ :big:`字串`\ )  小字(\ :small:`字串`\ )
.. ● 格式2 ― 上標(\ :sup:`字串`\ )  下標(\ :sub:`字串`\ )  ``去除格式字串``
.. ● 項目 ― #. (換行) #.　或是a. (換行) #. 或是I(i). 換行 #.  或是*. -. +. 子項目前面要多空一格
.. ● 插入teaser分頁 ― .. TEASER_END
.. ● 插入latex數學 ― 段落裡加入\ :math:`latex數學`\ 語法，或獨立行.. math:: (換行) Latex數學
.. ● 插入figure ― .. figure:: 路徑(換行):width: 320(換行):align: center(換行):target: 路徑
.. ● 插入slides ― .. slides:: (空一行) 圖擋路徑1 (換行) 圖擋路徑2 ... (空一行)
.. ● 插入youtube ― ..youtube:: 影片的hash string
.. ● 插入url ― 段落裡加入\ `連結字串`_\  URL區加上對應的.. _連結字串: 網址 (儘量用這個)
.. ● 插入直接url ― \ `連結字串` <網址或路徑>`_ \    (包含< >)
.. ● 插入footnote ― 段落裡加入\ [#]_\ 註腳    註腳區加上對應順序排列.. [#] 註腳內容
.. ● 插入citation ― 段落裡加入\ [引用字串]_\ 名字字串  引用區加上.. [引用字串] 引用內容
.. ● 插入sidebar ― ..sidebar:: (空一行) 內容
.. ● 插入contents ― ..contents:: (換行) :depth: 目錄深入第幾層
.. ● 插入原始文字區塊 ― 在段落尾端使用:: (空一行) 內容 (空一行)
.. ● 插入本機的程式碼 ― ..listing:: 放在listings目錄裡的程式碼檔名 (讓原始碼跟隨網站) 
.. ● 插入特定原始碼 ― ..code::python (或cpp) (換行) :number-lines: (把程式碼行數列出)
.. ● 插入gist ― ..gist:: gist編號 (要先到github的gist裡貼上程式代碼) 
.. ============================================================================================
