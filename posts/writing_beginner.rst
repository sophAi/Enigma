.. title: 寫作第一步，純文字檔的好處
.. slug: writing_beginner
.. date: 20130605 14:04:00
.. tags: 
.. link: draft, 自由軟體
.. description: Created at 20130605 12:14:46
.. ===================================Metadata↑================================================
.. ● 記得加上tags: 人生，狗狗，程式，生活紀錄，英文，閱讀，教養，科學，mathjax
.. ● 記得加上slug，會以slug內容作為檔名(html檔)
.. ===================================文章起始↓================================================

vim是一種純文字檔的編輯器，用慣word等排版軟體的人，可能比較難以理解純文字檔的好處，因此假設讀者是一個Office長期使用者，來看看以vim編輯文字有哪些好處：

格式與內容分開
-------------------

內容將純文字檔作為所有格式的原始資料是再適合也不過的了，跟doc這類將內容與格式綁在一起的格式不同，由於純文字檔案，並不能適切的表現出排版的效果，例如文字繞圖，置中，靠左，標題，甚至是換頁標籤等，這些都沒有辦法在純文字檔裡表現，因此使用純文字檔最重要的哲學就是―「格式與內容分開處理」，想想一份文e稿，我們可以用網頁呈現(html)，也可以用doc檔呈現，甚至是pdf檔，他們雖然排版方式有些不同，但是內容卻是相同的，如果我們將內容的部份獨立出來，只要套用一些格式設定，就能輕易地將這個文件在不同的格式與檔案間變換，也許您會說，市面上已經有一堆軟體可以將doc檔轉換成其他格式，然而word不可能支援各式各樣的檔案格式的，例如電子書,chm，wiki，說明文件(man page)，甚至是心智圖，純文字檔的好處就是，99%的檔案格式，都可以，甚至只能由純文字檔轉換而來，而這些轉換程式大多為自由軟體。

當我們將格式分開處理，是否就代表我們的文稿再也無法呈現類似word那樣多彩多姿的排版呢?其實完全相反，我們先看看大多數人最常使用的插入圖片功能，在純文字檔裡要實現插入圖片，只要如同描述一個文章的段落一般，只是內容為「這裡插入某某圖檔，位置與長寬如下，以及他的文字敘述如下」這類敘述，轉換格式的程式會自動依照其描述將圖片插入，當然，由於純文字檔本身不可能放置圖片，因此這種效果必須要等到轉換成doc，odt，或pdf檔之後才看得到。這種作法有好處也有壞處，壞處就是以前使用word那種所見即所得的效果不再，但好處卻是進行文章撰寫時，只要先在適當的段落間寫下「這裡插入某張圖片」的描述即可，等到文章完成了，才開始進行圖片位置與大小的整修，這種「內容優先，最後排版」的寫作哲學，反而可以將作者從寫作排版兩頭燒的混亂中解救出來。畢竟當您文思泉湧時，卻因為不停調整文繞圖效果到最佳狀態而打斷思緒，或是寫到一半，突然想中途插入一張圖片，結果發現排版又被弄亂了，這些事件往往都會讓人跳腳不已。如果您已經很習慣在寫作當時同時處理這些排版，不如改用vim，好好享受沒有排版的干擾，專注在內容一氣呵成的寫作哲學吧!

先前所說的插入圖片只是格式裡的一小部份，事實上圖表，數學式子，超連結，註腳，大小標題，粗斜體，文獻，項目(1,2,3..)，甚至是具有連結功能的章節目錄，我們可以說，要寫成一本書所需要的所有功能都一應具全，只有兩樣東西是沒有的，就是文書處理軟體漂亮的介面與所件即所得的效果。同時，寫作者必須要學習一點受用一生的輕量級文件語法，以這篇文章為例，我所使用的是RestructuredText(ReST)這個輕量級文件格式，在vim下，他可以透過插件隨時將您編輯的內容轉換成pdf檔，因此通常我都是文章寫得差不多了，才會轉換成pdf檔檢查一下，其他語言還有更簡單的tex2tag，或是同等好用的Markdown，我採用ReST的理由，一方面是因為其為Python內定的文件格式，另一方面，則是這個網站是以ReST為主，python語言的好處擇日詳述，我覺得他是每個想學程式語言的人必定要接觸的。寫好的ReST純文字檔，除了轉換成你我所看到的網頁內容，也可以輕易的轉換成office格式，Ebook格式，chm格式，以及pdf格式，說他是一切文件的原始碼也不為過。

最後由轉換成純文字寫作後的A君的一段感想作為本章節的結尾：「排版的確是寫作殺手，他扼殺了創作時的靈感，並讓寫作者陷入無盡的修改迴圈。」

檔案輕巧，不易損毀
-------------------------

容易管理與備份
-------------------------

容易轉換格式
------------------------



.. ===================================文章結束↑/語法備忘錄↓====================================
.. ● 格式1 ― 粗體(**字串**)  斜體(*字串*)  大字(\ :big:`字串`\ )  小字(\ :small:`字串`\ )
.. ● 格式2 ― 上標(\ :sup:`字串`\ )  下標(\ :sub:`字串`\ )  ``去除格式字串``
.. ● 項目 ― #. (換行) #.　或是a. (換行) #. 或是I(i). 換行 #.  或是*. -. +. 子項目前面要多空一格
.. ● 插入teaser分頁 ― .. TEASER_END
.. ● 插入latex數學 ― 段落裡加入\ :math:`latex數學`\ 語法，或獨立行.. math:: (換行) Latex數學
.. ● 插入figure ― .. figure:: 路徑(換行):width: 320(換行):align: center(換行):target: 路徑
.. ● 插入slides ― .. slides:: (空一行) 圖擋路徑1 (換行) 圖擋路徑2 ... (空一行)
.. ● 插入youtube ― ..youtube:: 影片的hash string
.. ● 插入url ― 段落裡加入\ `連結字串`_\  URL區加上對應的.. _連結字串: 網址 (儘量用這個)
.. ● 插入直接url ― \ `連結字串` <網址或路徑>`_ \    (包含< >)
.. ● 插入footnote ― 段落裡加入\ [#]_\ 註腳    註腳區加上對應順序排列.. [#] 註腳內容
.. ● 插入citation ― 段落裡加入\ [引用字串]_\ 名字字串  引用區加上.. [引用字串] 引用內容
.. ● 插入sidebar ― ..sidebar:: (空一行) 內容
.. ● 插入contents ― ..contents:: (換行) :depth: 目錄深入第幾層
.. ● 插入原始文字區塊 ― 在段落尾端使用:: (空一行) 內容 (空一行)
.. ● 插入本機的程式碼 ― ..listing:: 放在listings目錄裡的程式碼檔名 (讓原始碼跟隨網站) 
.. ● 插入特定原始碼 ― ..code::python (或cpp) (換行) :number-lines: (把程式碼行數列出)
.. ● 插入gist ― ..gist:: gist編號 (要先到github的gist裡貼上程式代碼) 
.. ============================================================================================
