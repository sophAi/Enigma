<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"><channel><title>~Enigma~   文以載道，寧靜以致遠 (自由的程式人生)</title><link>http://sophAi.github.com/Enigma</link><description>It's a journey toward happiness</description><lastBuildDate>Sat, 13 Jul 2013 00:26:53 GMT</lastBuildDate><generator>nikola</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>自動化縮圖與生成文章檔案</title><link>http://sophAi.github.com/Enigma/posts/Coding/jpg2rst.html</link><description>&lt;!-- title: 自動化縮圖與生成文章檔案 --&gt;
&lt;!-- slug: jpg2rst --&gt;
&lt;!-- date: 20130713 00:11:50 --&gt;
&lt;!-- tags: 自由的程式人生 --&gt;
&lt;!-- link: --&gt;
&lt;!-- description: Created at 20130712 23:17:53 --&gt;
&lt;!-- ===================================Metadata↑================================================ --&gt;
&lt;!-- 記得加tags: 人生省思,流浪動物,生活日記,學習與閱讀,英文,mathjax,自由的程式人生,書寫人生,理財 --&gt;
&lt;!-- 記得加slug(無副檔名)，會以slug內容作為檔名(html檔)，同時將對應的內容放到對應的標籤裡。 --&gt;
&lt;!-- ===================================文章起始↓================================================ --&gt;
&lt;!-- &lt;body&gt; --&gt;
&lt;p&gt;在了解了縮圖對於照片的影響，以及Imagemagick的使用方法，我們現在將這些資訊實用化，應用在網路文章的寫作，我的目標有以下幾個:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;&lt;li&gt;將滑鼠點擊的次數降到最低。&lt;/li&gt;
&lt;li&gt;跨平台的可能性。&lt;/li&gt;
&lt;li&gt;未來應用的擴充性。&lt;/li&gt;
&lt;li&gt;方便性。&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;這裡筆者以python程式進行上述目標的實作，請先去&lt;a class="reference external" href="http://www.imagemagick.org/script/binary-releases.php#iOS"&gt;Imagemagick&lt;/a&gt; &lt;a class="footnote-reference" href="/posts/Coding/jpg2rst.html#id2" id="id1"&gt;[1]&lt;/a&gt;網站下載convert套件並安裝好，確定他可以執行如下的縮圖指令:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
convert 原始圖檔.jpg -colorspace RGB -filter LanczosSharp -distort Resize 800x800 -unsharp 1x0.55+1.5+0.002 -colorspace sRGB -border 10 -quality 100 縮圖檔名.j    pg
&lt;/pre&gt;
&lt;p&gt;接著下載筆者的jpg2rst套件:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
git clone https://github.com/sophAi/jpg2rst.git jpg2rst
cd jpg2rst
easy_install *.egg
&lt;/pre&gt;
&lt;p&gt;即可安裝好。&lt;/p&gt;
&lt;p&gt;工作流程如下:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;&lt;li&gt;先把想要縮圖的照片集中在一個目錄下。&lt;/li&gt;
&lt;li&gt;執行jpg2rst.main()。&lt;/li&gt;
&lt;li&gt;自動產生所有照片的縮圖到對應解析度的目錄下。&lt;/li&gt;
&lt;li&gt;同時生成包含該照片路徑的文件檔，這裡我們採用Restructured Text(ReST)格式。&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;這個檔案總共包含4個py檔，分別執行不同的工作，例如:&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="link://listing/jpg2rst/file_tools.py"&gt;jpg2rst/file_tools.py&lt;/a&gt;&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
#!/usr/bin/env python
def search(keyword='.jpg',recursive='n'):
    ''' Search for the file (default=.jpg) including the recursive directory and return a list of the full file name.
    return: file_list (str list)
    usage: search_file(str keyword,str recursive)
    example: search_file(keyword='*.jpg',recursive='y')
    recursive: 'y'   # turn on the recursive searching in the subdirectories'''
    import os
    from fnmatch import fnmatch
    file_list = list()
    if recursive == 'y': 
        for root, dirs, files in os.walk('.'):
            for file_name in files:
#                if os.path.join(root,file_name).lower().lstrip('./').find(keyword.lower()) &amp;gt; -1:       
                if fnmatch(os.path.join(root,
                    file_name).lower().lstrip('./'),keyword.lower()):
                    file_list.append(os.path.join(root,file_name).lstrip('./'))  #Using walk, the file name would start with './dir/file.dat'. Use lstrip('./') to remove the string. 



    else:
        for file_name in os.listdir('.'):
#            if file_name.lower().lstrip('./').find(keyword.lower()) &amp;gt; -1:
            if fnmatch(file_name.lower().lstrip('./'),keyword.lower()):
                file_list.append(file_name)


    file_list.sort()
    return file_list

def clear(file_list):
    ''' Delete the files listed in the file_list. Use search_file() first to determine the file_list'''
    import os
    if type(file_list).__name__ == 'str':
        print('Delete '+file_list)
        os.remove(file_list)
    elif tpye(file_list).__name__ == 'list':
        for file_name in file_list:
            print('Delete '+file_name)
            os.remove(file_name)
   

def copy(file_list,destinate_list='.'):
    ''' Copy the files listed in the file_list to the destinate_list. Use search_file() first to
    determine the file_list. 
    destinate_list may be a string(dir_path) or a file list with path
    To copy the file in the current directory, specify ',' as destinate_list'''
    import shutil, os, sys
    file_type = type(file_list).__name__
    file_len = len(file_list)
    destinate_type = type(destinate_list).__name__
    destinate_len = len(destinate_list)
    if file_list != destinate_list:
        if file_type == 'list' and destinate_type == 'list' and file_len == destinate_len:
            I0=0
            for file_name in file_list:
                print('Copy '+file_name+' to '+destinate_list[I0])
                shutil.copy(file_name,destinate_list[I0])  
                I0=I0+1
      
        elif file_type == 'list' and destinate_type == 'str' and os.path.isdir(destinate_list):
# A list of files copied to a directory
           for file_name in file_list:
                print('Copy '+file_name+' to '+destinate_list)
                shutil.copy(file_name,destinate_list)

        elif file_type == 'str' and destinate_type == 'str':
# Copy one file
            shutil.copy(file_list,destinate_list)  
        elif file_type == 'str' and destinate_type == 'list':
            multi_target_opt = raw_input("Copy one file to multiple targets. Are you sure? (y/n)\n")
            if multi_target_opt == 'y':
                for target_file_name in destinate_list:
                    print ('Copy '+ file_list+' to '+target_file_name)
                    shutil.copy(file_list,target_file_name)

        else:
            print ("Error occurs!Exit!")
            sys.exit(1)


def move(file_list,destinate_list='.'):
    ''' Move the files listed in the file_list to destinate_list. Use searh_file() to determine
    the file_list'''
    print ('Copying files...')
    copy(file_list,destinate_list)
    remove_opt = raw_input('Delete the source files?(y/n)\n')
    if remove_opt == 'y':
        print('Deleting files...')
        clear(file_list)

    print('Moving files complete!')


def main():
     search()

if __name__ == "__main__":
    main()

&lt;/pre&gt;
&lt;p&gt;其主要的任務是搜尋當前以及所有子目錄下的特定檔案，如同search開頭所述，我們只要指定keyword，他就會將符合特徵的檔案列表傳回，我們將會利用這個列表來進行縮圖以及生成文字範例檔的工作，search()的用途當然不只是在縮圖，日後可以非常方便的用他來做大量處理檔案的工作。&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="link://listing/jpg2rst/fig_tools.py"&gt;jpg2rst/fig_tools.py&lt;/a&gt;&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
#!/usr/bin/env python
def resize(resolution,jpg_list):
    ''' Input the resolution referring to the maximal height and width of the resizing jpg file
    Return: resize_jpg_list (str list)
    Usage: resize_jpg(str/int/str_list resolution, str_list jpg_list)
    Example: resize_jpg(resolution=['640','800'],jpg_list=[])
    Resolution can be either integer, string, or a list of strings'''
    import subprocess, string, sys, os, shutil
    resize_jpg_list=list()
    if type(resolution).__name__ == 'int':
        resize_res_list=[str(resolution)]
    elif type(resolution).__name__ == 'str':
        resize_res_list=[resolution]
    elif type(resolution).__name__ == 'list':
        resize_res_list=resolution
       
#    print(jpg_list)
    for resize_res in resize_res_list:
        if os.path.isdir(resize_res):
            print (resize_res+'/'+" directory exist! Cleaning it\n")
            shutil.rmtree(resize_res)
          
        print ("Making new directory: "+resize_res+'/ \n')
        os.mkdir(resize_res)
        for file_name in jpg_list:
            if file_name.find(resolution+'_') == -1:  #Detect existing resized jpg file
                resize_file_name=file_name.split('/')[0:-1]
                resize_file_name.append(resize_res+'/'+resize_res+'_'+file_name.split('/')[-1])
                resize_file_name = string.join(resize_file_name,'/')
#                convert_command=['convert','-colorspace','sRGB','-unsharp','10x3.5+1.3+0.003','-resize',resolution+'x'+resolution,'-filter','Lanczos2','-border','10','-quality','90',file_name,resize_file_name]
#                convert_command=['convert','-colorspace','sRGB','-resize',resolution+'x'+resolution,'-filter','Lanczos','-unsharp','1x0.3+1.7+0.03','-border','10','-quality','100',file_name,resize_file_name]
                convert_command=['convert',file_name,'-colorspace','RGB','-filter','LanczosSharp','-distort','Resize',resize_res+'x'+resize_res,'-unsharp','1x0.55+1.5+0.002','-colorspace','sRGB','-border','10','-quality','95',resize_file_name]
                print(" ".join(convert_command)+"\n")
                cmd_status = subprocess.call(convert_command)
                if cmd_status != 0:                 
                    print('Subprocess.call failure! Exit now!\n')
                    sys.exit(1)

                resize_jpg_list.append(resize_file_name)


    resize_jpg_list.sort()
    return resize_jpg_list


def log(log_file,jpg_list):
    ''' Write the list of jpg file name into the log file
    Return: none
    Usage: fig_log(str log_file, str_list/str jpg_list)
    Example: fig_log(log_file='fig_list.log',jpg_list)'''
    import os
    log_file_obj = open(log_file,'w')
    if type(jpg_list).__name__ == 'str':
        file_list = [jpg_list]
    elif type(jpg_list).__name__ == 'list':
        file_list = jpg_list

    for file_name in file_list:
        log_file_obj.write(file_name+'\n')
     
    log_file_obj.close()
    print('Write log file to '+log_file+'\n')

def main():
    resize()

if __name__ == "__main__":
    main()

&lt;/pre&gt;
&lt;p&gt;有了search()傳回的檔案列表，我們將其輸入至resize()這個函式裡，並指定圖形長與寬最大的解析度(例如800)，他會偵測並將縮圖輸出到一個新的目錄(800/)，同時也會自動略過已經縮圖過的圖檔，如果解析度的部份輸入none，則不會進行縮圖銳化的工作。&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="link://listing/jpg2rst/rst_tools.py"&gt;jpg2rst/rst_tools.py&lt;/a&gt;&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
#!/usr/bin/env python
def add_fig(fig_list):
    '''Form template rst file including the codes for the resized figures
    return rst_file (str), fig_num (int)
    usage: form_rst(str_list fig_list)
    example: form_rst(['fig1.jpg','fig2.jpg',...])'''
    import os
    import time
    from fnmatch import fnmatch
    time_label = time.strftime('%Y%m%d %H:%M:%S',time.localtime())
    try:
        rst_temp_file_obj = open('/'+os.getcwd().split('/')[1]+'/'+os.getcwd().split('/')[2]+'/.vim/template/temp_rst.txt','r')
        rst_slug = os.getcwd().split('/')[-1]
        rst_file = rst_slug+'.rst'
        jpg2rst_temp_file_obj = open(rst_file,'w')
        line_info = rst_temp_file_obj.readline()
        while line_info != '.\n':
            line_info = rst_temp_file_obj.readline()
#            if line_info.find('slug:') &amp;gt; -1:
            if fnmatch(line_info,'*slug:*'):
                jpg2rst_temp_file_obj.write('.. slug: '+rst_slug+'\n')
#            elif line_info.find('data:') &amp;gt; -1:
            elif fnmatch(line_info,'*data:*'):
                jpg2rst_temp_file_obj.write('.. data: '+time_label+'\n')
#            elif line_info.find('description:') &amp;gt; -1:
            elif fnmatch(line_info,'*description:*'):
                jpg2rst_temp_file_obj.write('.. description: Created at '+time_label+'\n')
#            elif line_info.find('&amp;lt;body&amp;gt;') &amp;gt; -1:
            elif fnmatch(line_info,'*&amp;lt;body&amp;gt;*'):
                #Insert codes of resized figure here       
                jpg2rst_temp_file_obj.write(line_info)
                fig_number = len(fig_list)
                for rst_figure in fig_list:
                    jpg2rst_temp_file_obj.write('\n.. figure:: '+rst_figure+'\n')
                    jpg2rst_temp_file_obj.write('   :target: '+rst_figure+'\n')
                    jpg2rst_temp_file_obj.write('   :align: center\n\n\n\n')
#                    jpg2rst_temp_file_obj.write('   :width: 640'+'\n\n')

            elif line_info == '.\n':
                print('\nMake '+rst_file+' complete\n')
            else:
                jpg2rst_temp_file_obj.write(line_info)


    finally:
        jpg2rst_temp_file_obj.close()
        rst_temp_file_obj.close()
        return rst_file

#def append_text():

#def replace_text():

#def append_fig():

#def replace_fig():

#def rst2html():

#def rst2pdf():

#def rst_deploy():

def main():
     add_fig()

if __name__ == "__main__":
    main()


&lt;/pre&gt;
&lt;p&gt;resize()會輸出縮圖銳化後的檔案列表，我們可以進一步將其輸入到add_fig()函式裡，他會自動擷取vim的ReST範例檔，裏面已經自動包含了所有縮圖的圖片連結，您可以將ReST範例檔其儲存在~/.vim/template/temp_rst.txt檔案裡，有關vim的自動文件範例檔我們會另外找機會說明，簡單來說，他可以偵測您創造的文字檔是屬於哪種格式(C++, Python, Latex...等)，然後利用對應的範例檔生成文件，是個非常強大且高效率的功能。&lt;/p&gt;
&lt;p&gt;最後是jpg2rst.py這個程式，其實就是用來整合上面3個函式，讓我們所想的工作流程得以實現，不難發現，任何一個函式都可以獨立運作，例如我們可以單獨使用resize()來測試縮圖銳化的參數，也可以用search()來蒐集任何檔案，以進行特別的操作(例如修改檔名，或是搬移特定名稱的檔案)，這些都考慮了擴充性與彈性，除了幫大量圖片縮圖銳化省去不少功夫，更是筆者在其餘工作中重要的小幫手，等於是辛苦一次受用無窮的工具，當我們不斷進行例行性的操作時，一個良好的自動化工具可以大大提高工作效率，讓我們有更多時間陪陪家人，或是喝杯咖啡思考一下。&lt;/p&gt;
&lt;!-- &lt;/body&gt; --&gt;
&lt;!-- &lt;url&gt; --&gt;
&lt;!-- &lt;/url&gt; --&gt;
&lt;!-- &lt;footnote&gt; --&gt;
&lt;table class="docutils footnote" frame="void" id="id2" rules="none"&gt;&lt;colgroup&gt;&lt;col class="label"&gt;&lt;col&gt;&lt;/colgroup&gt;&lt;tbody valign="top"&gt;&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="/posts/Coding/jpg2rst.html#id1"&gt;[1]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;&lt;a class="reference external" href="http://www.imagemagick.org/script/binary-releases.php#iOS"&gt;http://www.imagemagick.org/script/binary-releases.php#iOS&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;!-- &lt;/footnote&gt; --&gt;&lt;!-- &lt;citation&gt; --&gt;&lt;!-- &lt;/citation&gt; --&gt;&lt;!-- ===================================文章結束↑/語法備忘錄↓==================================== --&gt;&lt;!-- 格式1: 粗體(**字串**)  斜體(*字串*)  大字(\ :big:`字串`\ )  小字(\ :small:`字串`\ ) --&gt;&lt;!-- 格式2: 上標(\ :sup:`字串`\ )  下標(\ :sub:`字串`\ )  ``去除格式字串`` --&gt;&lt;!-- 項目: #. (換行) #.　或是a. (換行) #. 或是I(i). 換行 #.  或是*. -. +. 子項目前面要多空一格 --&gt;&lt;!-- 插入teaser分頁: .. TEASER_END --&gt;&lt;!-- 插入latex數學: 段落裡加入\ :math:`latex數學`\ 語法，或獨立行.. math:: (換行) Latex數學 --&gt;&lt;!-- 插入figure: .. figure:: 路徑(換):width: 寬度(換):align: left(換):target: 路徑(空行對齊)圖標 --&gt;&lt;!-- 插入slides: .. slides:: (空一行) 圖擋路徑1 (換行) 圖擋路徑2 ... (空一行) --&gt;&lt;!-- 插入youtube: ..youtube:: 影片的hash string --&gt;&lt;!-- 插入url: 段落裡加入\ `連結字串`_\  URL區加上對應的.. _連結字串: 網址 (儘量用這個) --&gt;&lt;!-- 插入直接url: \ `連結字串` &lt;網址或路徑&gt;`_ \    (包含&lt; &gt;) --&gt;&lt;!-- 插入footnote: 段落裡加入\ [#]_\ 註腳    註腳區加上對應順序排列.. [#] 註腳內容 --&gt;&lt;!-- 插入citation: 段落裡加入\ [引用字串]_\ 名字字串  引用區加上.. [引用字串] 引用內容 --&gt;&lt;!-- 插入sidebar: ..sidebar:: (空一行) 內容 --&gt;&lt;!-- 插入contents: ..contents:: (換行) :depth: 目錄深入第幾層 --&gt;&lt;!-- 插入原始文字區塊: 在段落尾端使用:: (空一行) 內容 (空一行) --&gt;&lt;!-- 插入本機的程式碼: ..listing:: 放在listings目錄裡的程式碼檔名 (讓原始碼跟隨網站) --&gt;&lt;!-- 插入特定原始碼: ..code::python (或cpp) (換行) :number-lines: (把程式碼行數列出) --&gt;&lt;!-- 插入gist: ..gist:: gist編號 (要先到github的gist裡貼上程式代碼) --&gt;&lt;!-- ============================================================================================ --&gt;</description><category>自由的程式人生</category><guid>http://sophAi.github.com/Enigma/posts/Coding/jpg2rst.html</guid><pubDate>Fri, 12 Jul 2013 16:11:50 GMT</pubDate></item></channel></rss>